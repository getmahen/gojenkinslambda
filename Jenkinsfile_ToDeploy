// THIS PIPELINE IS CONFIGURED IN JENKINS AS A PARAMETERIZED BUILD WITH FOLLOWING PARAMETERS
// * ARTIFACT_VERSION (Description: Version of the artifact to deploy)
// * REGION (Description: Region to deploy)
// * DEPLOY_ENV (Description: Environment to deploy)

pipeline {
  agent any

    environment {
            ARTIFACTFILENAME = "buildartifacts-${params.ARTIFACT_VERSION}"
            ROLE_ARN = 'arn:aws:iam::674346455231:role/jenkins/jenkins_env'
            DEPLOY_ENV = "${params.DEPLOY_ENV}"
            REGION_TO_DEPLOY = "${params.REGION}"
            VAULT_TOKEN = "${params.VAULT_TOKEN}"
            ANSIBLE_VAULT_ID = "${params.ANSIBLE_VAULT_ID}"
      }
      
  stages {
    
    stage('Retrieve Lambda package from S3'){
      
      steps {

        wrap([$class: 'BuildUser']) {
            
          sh '''
          #!/bin/bash
          rm -rf buildartifacts*
          
          set +x
          STS_REQ=\$(aws sts assume-role --role-arn ${ROLE_ARN} --role-session-name jenkins)

          # from that call, parse out and assign the temporary credentials to the environmental vars read by the AWS SDK
          export AWS_ACCESS_KEY_ID="$(echo \$STS_REQ | jq -r '.Credentials.AccessKeyId')"
          export AWS_SECRET_ACCESS_KEY="$(echo \$STS_REQ | jq -r '.Credentials.SecretAccessKey')"
          export AWS_SESSION_TOKEN="$(echo \$STS_REQ | jq -r '.Credentials.SessionToken')"
          aws s3 cp s3://testjenkinsartifacts/${DEPLOY_ENV}/${ARTIFACTFILENAME}.zip ${ARTIFACTFILENAME}.zip
          
          unzip ${ARTIFACTFILENAME}.zip
          '''
        }
      }
    }
    
    stage('Validate package') {
        steps {
          wrap([$class: 'BuildUser']) {
            sh '''
            if [ ! -d "${ARTIFACTFILENAME}/infrastructure/terraform" ]; then
              echo 'infrastructure/terraform does not exist'
              exit 1
            fi
            
            '''
            
            script {
              ansiblePlaybookExists = fileExists("${ARTIFACTFILENAME}/infrastructure/ansible/vault-secrets.yml")
              if(ansiblePlaybookExists) {
                dir("${ARTIFACTFILENAME}/infrastructure/ansible") {
                  
                  withPythonEnv('/usr/bin/python2.7'){
                    pysh 'ansible-playbook vault-secrets.yml --syntax-check'
                  }
                }
              }
            }
            
          }
        }
        post {
                success {
                    echo 'Package validation passed'
                }
                failure {
                    //slackSend channel: '#ci', color: 'failed', message: "Lambda Package validation failed in environment: `${params.DEPLOY_ENV}` FAILED. Job: `${env.JOB_NAME}` (<${env.BUILD_URL}|#${env.BUILD_NUMBER}>)"
                    echo 'Package validation failed'
                }
                cleanup {
                    echo 'Deleting Zip file..'
                    sh 'rm ${ARTIFACTFILENAME}.zip'
                }
            }
        
    }
    
    stage ('Run Ansible changes') {
      when {
          expression { ansiblePlaybookExists == true }
        }
      steps {

        dir("${ARTIFACTFILENAME}/infrastructure/ansible") {
            
            sh 'set +x; echo ${ANSIBLE_VAULT_ID} > vault_pass'
            sh '''
              set +x
              STS_REQ=\$(aws sts assume-role --role-arn ${ROLE_ARN} --role-session-name jenkins)

              # from that call, parse out and assign the temporary credentials to the environmental vars read by the AWS SDK
              export AWS_ACCESS_KEY_ID="$(echo \$STS_REQ | jq -r '.Credentials.AccessKeyId')"
              export AWS_SECRET_ACCESS_KEY="$(echo \$STS_REQ | jq -r '.Credentials.SecretAccessKey')"
              export AWS_SESSION_TOKEN="$(echo \$STS_REQ | jq -r '.Credentials.SessionToken')"
            '''
            
            //INSTALLING PIP DEPENDENCIES EXPLICITLY AND THEN EXECUTING ANSIBLE PLAYBOOK
          // cd ${ARTIFACTFILENAME}/infrastructure/ansible;
          //   pip install --user ansible-modules-hashivault
          //   pip install --user boto
          //   pip install --user boto3
          //   pip install --user botocore
          //VAULT_CACERT=${HOME}/.credo/vault/vault.crt VAULT_ADDR=https://localhost:8243 VAULT_TOKEN=${VAULT_TOKEN} AWS_REGION=us-west-2 ansible-playbook vault-secrets.yml --vault-id=$HOME/.ansible/envs/dev/ansible-vault-apps --extra-vars "env=dev"
          ///////////////////////////////////////////////////////////////////////////


          //USING VIRTUALENV
          // pip install --user virtualenv
          //   USER_BASE_PATH=$(python -m site --user-base)
          //   export PATH=$PATH:$USER_BASE_PATH/bin
          //   virtualenv -p /usr/bin/python2.7 venv
          //   source venv/bin/activate
          //   pip install boto boto3 botocore ansible-modules-hashivault
          //   ls -latr ${HOME}/.ansible/envs/dev/ansible_vault/.vault_pass
          //   VAULT_ADDR=https://vault.credodev.dev:443 VAULT_TOKEN=${VAULT_TOKEN} AWS_REGION=us-west-2 ansible-playbook vault-secrets.yml --vault-id=${HOME}/.ansible/envs/dev/ansible_vault/.vault_pass --extra-vars "env=dev"

          // echo 'Deactivating viratualenv..'
          // deactivate   
          
          // echo 'Deleting viratualenv directory..'
          // rm venv'
          ///////////////////////////////////////////////////////////////////////////


          //USING PYENV JENKINS PLUGIN
          // dir("${ARTIFACTFILENAME}/infrastructure/ansible") {
          //       sh 'set +x; echo ${ANSIBLE_VAULT_ID} > vault_pass'
                
          //       withPythonEnv('/usr/bin/python2.7'){
                    
          //           pysh 'pip install boto boto3 botocore ansible-modules-hashivault'
          //pysh 'set +x; VAULT_ADDR=https://vault.credodev.dev:443 VAULT_TOKEN=${VAULT_TOKEN} AWS_REGION=us-west-2 ansible-playbook vault-secrets.yml --vault-id=./vault_pass --extra-vars "env=dev"'
          //}
          //}
          ///////////////////////////////////////////////////////////////////////////

                withPythonEnv('/usr/bin/python2.7'){
                    
                    pysh 'pip install boto boto3 botocore ansible-modules-hashivault'
                    
                    
                    pysh 'set +x; VAULT_ADDR=https://vault.credodev.dev:443 VAULT_TOKEN=${VAULT_TOKEN} AWS_REGION=us-west-2 ansible-playbook vault-secrets.yml --vault-id=./vault_pass --extra-vars "env=dev"'
                    
                }
                
                sh 'rm vault_pass'
            }
      }
    }
    
    stage ('Upload Lambda package to S3') {
      steps {
        wrap([$class: 'BuildUser']) {
            dir("${ARTIFACTFILENAME}") {
              ansiColor('xterm'){

                sh '''
                #!/bin/bash

                set +x
                STS_REQ=\$(aws sts assume-role --role-arn ${ROLE_ARN} --role-session-name jenkins)

                # from that call, parse out and assign the temporary credentials to the environmental vars read by the AWS SDK
                export AWS_ACCESS_KEY_ID="$(echo \$STS_REQ | jq -r '.Credentials.AccessKeyId')"
                export AWS_SECRET_ACCESS_KEY="$(echo \$STS_REQ | jq -r '.Credentials.SecretAccessKey')"
                export AWS_SESSION_TOKEN="$(echo \$STS_REQ | jq -r '.Credentials.SessionToken')"
                aws s3 cp ./checkipaddress.zip s3://testjenkinsartifacts/checkipaddress.zip
                
                '''
              }
            }
        }
      }
    }
    
    stage('Terraform Plan') {
       
        steps {
          wrap([$class: 'BuildUser']) {
            dir("${ARTIFACTFILENAME}/infrastructure/terraform") {
              ansiColor('xterm'){
              sh '''
                  set +x
                  STS_REQ=\$(aws sts assume-role --role-arn ${ROLE_ARN} --role-session-name jenkins)
                  
                  # from that call, parse out and assign the temporary credentials to the environmental vars read by the AWS SDK
                  export AWS_ACCESS_KEY_ID="$(echo \$STS_REQ | jq -r '.Credentials.AccessKeyId')"
                  export AWS_SECRET_ACCESS_KEY="$(echo \$STS_REQ | jq -r '.Credentials.SecretAccessKey')"
                  export AWS_SESSION_TOKEN="$(echo \$STS_REQ | jq -r '.Credentials.SessionToken')"
              '''
                
                sh "terraform --version"
                
                sh 'rm -rf ./.terraform/'
                //sh 'terraform init -backend-config="bucket=testjenkinsartifacts" -backend-config="region=us-west-2" -backend-config="role_arn=arn:aws:iam::674346455231:role/jenkins/jenkins_env"'
                sh 'terraform init -backend-config="./backendConfigs/${DEPLOY_ENV}" -backend-config="role_arn=${ROLE_ARN}" -backend-config="region=${REGION_TO_DEPLOY}"'
                sh 'export TF_VAR_environment=${DEPLOY_ENV}'
                sh 'export TF_VAR_terraform_user=${USER}'
                
                sh "set +e; terraform plan -out=tfplan.out -detailed-exitcode; echo \$? > status.tfplan"
                
                script {
                    tfPlanOutput = readFile('status.tfplan').trim()
                    
                    if (tfPlanOutput == "0") {
                        echo "Terraform plan success...No differences found. Nothing to Apply"
                    }
                    if (tfPlanOutput == "1") {
                      slackSend channel: '#ci', color: '#0080ff', message: "*Terraform Plan Failed*: `${env.JOB_NAME}` (<${env.BUILD_URL}|#${env.BUILD_NUMBER}>)"
                      
                      echo "Terraform plan failure..."
                      error('Terraform plan did not complete sucessfully.')
                    }
                    if (tfPlanOutput == "2") {
                      echo "Terraform plan success...differences found"
                      
                      slackSend channel: '#ci', color: 'good', message: "*Terraform Plan Awaiting Approval* Build will timeout in 1 minute: `${env.JOB_NAME}` (<${env.BUILD_URL}|#${env.BUILD_NUMBER}>)"
                      
                      timeout(time: 1, unit: 'MINUTES') {
                        input message: 'Apply Terraform Plan?', ok: 'Apply'
                      }
                      
                    }
                    
                }
              }
            }
          }
        }
    }
      
    stage ('Terraform Apply') {
      when {
        expression { tfPlanOutput == '2' }
      }

      steps{
        wrap([$class: 'BuildUser']) {
          dir("${ARTIFACTFILENAME}/infrastructure/terraform") {
              
            script {
              if (fileExists("status.tfapply")) {
                echo 'Deleteing status.tfapply file...'
                sh "rm status.tfapply"
              }
            }
            
            ansiColor('xterm'){
                sh 'set +e; echo Applying TF changes;'
                sh 'set +e; terraform apply tfplan.out; echo \$? > status.tfapply'
            }
              
          }
        }
      }
      
      post {
              success {
                  slackSend channel: '#ci', color: 'good', message: "Terraform changes applied successfully in environment: `${params.DEPLOY_ENV}` : `${env.JOB_NAME}` (<${env.BUILD_URL}|#${env.BUILD_NUMBER}>)"
                  echo 'Terraform apply SUCCESS!!'
              }
              failure {
                  slackSend channel: '#ci', color: 'failed', message: "Terraform changes failed in environment: `${params.DEPLOY_ENV}` FAILED. Job: `${env.JOB_NAME}` (<${env.BUILD_URL}|#${env.BUILD_NUMBER}>)"
                  echo 'Terraform apply FAILED'
              }
              cleanup {
                  echo 'Deleting Terraform plan artifacts..'
                  sh 'rm ./${ARTIFACTFILENAME}/infrastructure/terraform/status.tfplan'
              }   
      }
      
    }
      
  }
}